use cudarc::driver::LaunchAsync;
use cudarc::driver::LaunchConfig;
use anyhow::Result;

static PTX: &str = include_str!("../resources/gpu.ptx");
//设置调取ptx文件
//ptx大概长的样子很汇编
//
// 如下面例子所示: 部分代码
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-29745058
// Cuda compilation tools, release 11.3, V11.3.58
// Based on NVVM 7.0.1
//

// .version 7.3
// .target sm_52
// .address_size 64

// 	// .globl	sin_kernel
// .global .align 4 .b8 __cudart_i2opi_f[24] = {65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};

// .visible .entry sin_kernel(
// 	.param .u64 sin_kernel_param_0,
// 	.param .u64 sin_kernel_param_1,
// 	.param .u32 sin_kernel_param_2
// )
// {
// 	.local .align 4 .b8 	__local_depot0[28];
// 	.reg .b64 	%SP;
// 	.reg .b64 	%SPL;
// 	.reg .pred 	%p<12>;
// 	.reg .f32 	%f<38>;
// 	.reg .b32 	%r<53>;
// 	.reg .f64 	%fd<3>;
// 	.reg .b64 	%rd<33>;

pub fn demo() -> Result<()> {
    {
        let dev = cudarc::driver::CudaDevice::new(0)?;
        let ptx = cudarc::nvrtc::compile_ptx(PTX_SRC)?;
        dev.load_ptx(ptx, "hello_cuda_from_gpu", &["hello_cuda_from_gpu"])?;
        let hello_cuda_from_gpu = dev.get_func("hello_cuda_from_gpu", "hello_cuda_from_gpu").unwrap();
        let cfg = LaunchConfig {
            block_dim: (1,1,1),
            grid_dim: (1,1,1),
            shared_mem_bytes: 0,
        };
        unsafe { hello_cuda_from_gpu.launch(cfg, (0usize,)) }?;
    }
    Ok(())
}